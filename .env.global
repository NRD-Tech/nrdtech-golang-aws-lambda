#########################################################
# Configuration
#########################################################
# Used to identify the application in AWS resources | allowed characters: a-zA-Z0-9-_
export APP_IDENT_WITHOUT_ENV=my-test-project

# This is the AWS S3 bucket in which you are storing your terraform state files
# - This must exist before deploying
export TERRAFORM_STATE_BUCKET=mycompany-terraform-state

# This is the AWS region in which the application will be deployed
export AWS_DEFAULT_REGION=us-west-2

# OIDC Deployment role
# NOTE: for GitHub deployment you must also set this in the .github/workflows/main.yml file
export AWS_ROLE_ARN=arn:aws:iam::1234567890:role/github-pipelines-cd-abc123
export AWS_WEB_IDENTITY_TOKEN_FILE=$(pwd)/web-identity-token

# Lambda timeout and memory settings
export APP_TIMEOUT=60  # seconds
export APP_MEMORY=128  # memory in MB

# Must be one of these: X86_64, ARM64
# NOTE: Only GitHub supports ARM64 builds - Bitbucket doesn't
# NOTE2: In GitHub the build by default will be slow on ARM64. To speed this up,
#        create an ARM64 GitHub-hosted runner and use that instead.
export CPU_ARCHITECTURE=X86_64

# For Custom VPC: Uncomment and configure sections in terraform main.tf and lambda.tf

#########################################################
# Create code hash
# NOTE:
#   - When the code changes a new code hash file should be created
#   - The find command here should be configured so that it finds all files such that if they change a re-build
#     and deploy should occur
#########################################################
export CODE_HASH_FILE=code_hash.txt
docker run --rm -v $(pwd):/workdir -w /workdir alpine sh -c \
  "apk add --no-cache findutils coreutils && \
   find . -type f -path './.git*' -prune -o -path './.github*' -prune -o \( -name '*.go' -o -name '*.sh' -o -name 'Dockerfile' -o -name 'go.mod' -o -name 'go.sum' -o -name '.env.*' \) \
   -exec md5sum {} + | sort | md5sum | cut -d ' ' -f1 > terraform/main/${CODE_HASH_FILE}"
